# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-11-01 00:31
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urlname', models.SlugField(help_text=b'The unique name to use in URLs to identify this activity.', max_length=255, unique=True)),
                ('title', models.CharField(help_text=b'The title of this activity.', max_length=200)),
                ('text', models.TextField(help_text=b'Descriptive text about the activity')),
                ('description', models.TextField(blank=True, help_text=b'Descriptive text for meta-content tag for searches for the tag')),
                ('update_time', models.DateTimeField(default=datetime.datetime.now, help_text=b'The date &amp; time at which the activity last had a (significant) update')),
                ('difficulty', models.FloatField(help_text=b'Difficulty, 0=very easy, 10=very hard')),
                ('min_age', models.IntegerField(blank=True, help_text=b'Minimum age for which the activity is suitable', null=True)),
                ('min_age_with_help', models.IntegerField(blank=True, help_text=b'Minimum age for which the activity is suitable given help', null=True)),
            ],
            options={
                'ordering': ('title',),
                'verbose_name_plural': 'Activities',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.ImageField(upload_to=b'image/%Y/%m/%d')),
                ('slideshow', models.CharField(choices=[(b'y', b'Include in slideshow'), (b'n', b"Don't include in slideshow")], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Pdf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.FileField(upload_to=b'pdf/%Y/%m/%d')),
                ('type', models.CharField(choices=[(b'i', b'Instruction sheet'), (b't', b'Template'), (b'o', b'Other')], max_length=1)),
                ('description', models.TextField(blank=True, default=b'')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, help_text=b'Number to control the order', null=True)),
                ('text', models.CharField(help_text=b'The unique text identifying this tag', max_length=100, unique=True)),
                ('displaytext', models.CharField(blank=True, help_text=b'A longer piece of text describing the tag.  Optional.', max_length=100)),
                ('description', models.TextField(blank=True, help_text=b'Descriptive text for meta-content tag for searches for the tag')),
                ('icon', models.ImageField(blank=True, help_text=b'An icon for this tag.', upload_to=b'tagicon/%Y/%m/%d')),
                ('icon_selected', models.ImageField(blank=True, help_text=b'An icon to use when this tag is selected.', null=True, upload_to=b'tagicon/%Y/%m/%d')),
                ('type', models.CharField(choices=[(b'a', b'Display,search,browse'), (b's', b'Search,browse'), (b'c', b'Navigation category'), (b'b', b'Navigate with buttons')], max_length=1)),
                ('children', models.ManyToManyField(blank=True, help_text=b'Subtags of this tag.', to='activities.Tag')),
            ],
            options={
                'ordering': ('order', 'text'),
            },
        ),
        migrations.CreateModel(
            name='TagSynonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text=b'The text for this synonym', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[(b'd', b'demonstration')], max_length=100)),
                ('width', models.IntegerField(blank=True, help_text=b'Width of the video box', null=True)),
                ('height', models.IntegerField(blank=True, help_text=b'Height of the video box', null=True)),
                ('code', models.TextField(blank=True, help_text=b'Identifier code for the video', null=True)),
                ('image', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='activities.Image')),
            ],
        ),
        migrations.AddField(
            model_name='tag',
            name='synonyms',
            field=models.ManyToManyField(blank=True, help_text=b'Synonyms of this tag.', to='activities.TagSynonym'),
        ),
        migrations.AddField(
            model_name='activity',
            name='images',
            field=models.ManyToManyField(blank=True, help_text=b'The images associated with this activity.', to='activities.Image'),
        ),
        migrations.AddField(
            model_name='activity',
            name='pdfs',
            field=models.ManyToManyField(blank=True, help_text=b'The PDFs associated with this activity.', to='activities.Pdf'),
        ),
        migrations.AddField(
            model_name='activity',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text=b'The tags associated with this activity.', to='activities.Tag'),
        ),
        migrations.AddField(
            model_name='activity',
            name='videos',
            field=models.ManyToManyField(blank=True, help_text=b'The videos associated with this activity.', to='activities.Video'),
        ),
    ]
